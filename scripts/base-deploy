#!/usr/bin/env bash

# shellcheck source=lib/common.sh
. "${LIB_DIR:-$(cd "${0%/*}/../lib"&&pwd)}/common.sh"

# Deploy Values or Medians + OSMs (if delay > 0) (no solc optimization)
dappBuild osm
dappBuild testchain-medians

tokens=$(jq -r ".tokens | keys_unsorted[]" "$CONFIG_FILE")
for token in $tokens; do
    pipAddr=$(jq -r ".tokens.${token} | .pip | values" "$CONFIG_FILE")
    if [[ "$pipAddr" == "" ]]; then
        type=$(jq -r ".tokens.${token} | .pipDeploy | .type | values" "$CONFIG_FILE")
        # Deploy Medianizer as Feed
        if [[ "$type" == "median" ]]; then
            contract=$(dappCreate testchain-medians "Median${token}USD")
            eval "export PIP_${token}=${contract}"
            signers=$(jq -r ".tokens.${token} | .pipDeploy | .signers | .[]" "$CONFIG_FILE")
            # Approve oracle price feed providers
            allsigners=()
            for signer in $signers; do
                allsigners+=("${signer#0x}")
            done
            seth send "$(eval echo "\$PIP_${token}")" 'lift(address[] memory)' "[$(join "${allsigners[@]}")]"
            # Set quorum for Medianizer
            seth send "$(eval echo "\$PIP_${token}")" 'setBar(uint256)' "$(seth --to-uint256 3)"
        fi
        # Deploy DSValue as Feed
        if [[ "${type}" == "value" ]]; then
            contract=$(dappCreate osm DSValue)
            eval "export PIP_${token}=${contract}"
        fi
    else
        eval "export PIP_${token}=${pipAddr}"
        copyAbis osm
        copyAbis testchain-medians
    fi
    eval "export VAL_${token}=\$PIP_${token}"
done

# Deploy Multicall (no solc optimization)
dappBuild multicall
MULTICALL=$(dappCreate multicall Multicall)
log "multicall deployed"

# Deploy Token Faucet (no solc optimization)
dappBuild token-faucet
FAUCET=$(jq -r ".faucet | values" "$CONFIG_FILE")
if [[ -z "$FAUCET" ]]; then
    FAUCET=$(dappCreate token-faucet RestrictedTokenFaucet "$(seth --to-uint256 "$(seth --to-wei 50 ETH)")")
    if [[ "$DEPLOY_RESTRICTED_FAUCET" == "no" ]]; then
        seth send "$FAUCET" 'hope(address)' "0x0000000000000000000000000000000000000000"
    fi
    log "token faucet deployed"
fi

# Deploy ProxyRegistry (no solc optimization)
dappBuild dss-proxy-actions
PROXY_REGISTRY=$(jq -r ".proxyRegistry | values" "$CONFIG_FILE")
if [[ -z "$PROXY_REGISTRY" ]]; then
    PROXY_FACTORY=$(dappCreate dss-proxy-actions DSProxyFactory)
    PROXY_REGISTRY=$(dappCreate dss-proxy-actions ProxyRegistry "$PROXY_FACTORY")
else
    PROXY_FACTORY=$(seth storage "$PROXY_REGISTRY" 1)
    PROXY_FACTORY=0x${PROXY_FACTORY:26:66}
fi

log "proxy-registry deployed"

PATH="$DAPP_LIB/dss-deploy/bin:$PATH"

# Deploy Fabs (no solc optimization)
deploy-fab
# shellcheck source=/dev/null
. "load-fab-$(seth chain)"
rm "load-fab-$(seth chain)"
log "fabs deployed"

# Set the pause delay to 0 in order to make the needed initial configurations
export MCD_PAUSE_DELAY=0

# Make sure there is not $MCD_ADM set, so a temporary roles is created as authority (to handle variables set up easier)
unset MCD_ADM

MCD_GOV=$(jq -r ".gov | values" "$CONFIG_FILE")
if [[ -z "$MCD_GOV" ]]; then
    # It means the GOV token will be created now in the next deployment script call, then we can send funds to the Faucet and set permissions to FLOP
    newGovToken=true
else
    newGovToken=false
    export MCD_GOV
fi

MCD_ESM_MIN="$(seth --to-uint256 "$(seth --to-wei "$(jq -r ".esm_min | values" "$CONFIG_FILE")" "eth")")"
export MCD_ESM_MIN

# Deploy MCD Core Contratcs (solc optimized)
deploy-core
# shellcheck source=/dev/null
. "load-mcd-$(seth chain)"
rm "load-mcd-$(seth chain)"
log "core deployed"

# Mint Gov Token, send to the Faucet and set permissions if a new token
if [[ "$newGovToken" == true ]]; then
    seth send "$MCD_GOV" 'mint(address,uint256)' "$FAUCET" "$(seth --to-uint256 "$(seth --to-wei 1000000 ETH)")"
    seth send "$FAUCET" 'gulp(address)' "$MCD_GOV"

    # Use custom authority for the new GOV token
    dappBuild mkr-authority
    GOV_GUARD=$(dappCreate mkr-authority MkrAuthority)
    # Allow Flop to mint and Flap to burn Gov token
    seth send "$GOV_GUARD" 'rely(address)' "$MCD_FLOP" 
    export GOV_GUARD
fi

# Deploy Collaterals (no solc optimization)
tokens=$(jq -r ".tokens | keys_unsorted[]" "$CONFIG_FILE")
for token in $tokens; do
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")

    gemAddr=$(jq -r ".tokens.${token} | .gem | values" "$CONFIG_FILE")
    eval "export ${token}=${gemAddr}"

    for ilk in $ilks; do
        deploy-ilk-"$(echo "$token" | tr '[:upper:]' '[:lower:]')" "$ilk"
        log "${token}-${ilk} deployed"

        # shellcheck source=/dev/null
        . "load-ilk-$(echo "$token" | tr '[:upper:]' '[:lower:]')-$(echo "$ilk" | tr '[:upper:]' '[:lower:]')-$(seth chain)"
        rm "load-ilk-$(echo "$token" | tr '[:upper:]' '[:lower:]')-$(echo "$ilk" | tr '[:upper:]' '[:lower:]')-$(seth chain)"

        # If the ilk token was created by the previous deployment script call (new token) and it is not ETH, then we can send funds to the Faucet
        if [[ "$token" != "ETH" && "$gemAddr" == "" ]]; then
            seth send "$(eval echo "\$$token")" 'transfer(address,uint256)' "$FAUCET" "$(seth --to-uint256 "$(seth --to-wei 999000 ETH)")"
        fi
        export SKIP_BUILD=true
    done
done

# Deploy Proxy Actions (solc optimized)
PROXY_ACTIONS=$(dappCreate dss-proxy-actions-optimized DssProxyActions)
log "proxy actions deployed"

# Deploy CdpManager (no solc optimization)
CDP_MANAGER=$(dappCreate dss-proxy-actions DssCdpManager "$MCD_VAT")
log "manager deployed"
GET_CDPS=$(dappCreate dss-proxy-actions GetCdps)
log "getCdps deployed"

SAI_TUB=$(jq -r ".migration.tub | values" "$CONFIG_FILE")
ethAdapterAddr="$(eval echo "\$$(jq -r ".migration.ethAdapterVarName | values" "$CONFIG_FILE")")"
if [[ -n "$SAI_TUB" && -n "$ethAdapterAddr" ]]; then
    SAI="0x$(seth call "$SAI_TUB" 'sai()(address)')"
    export SAI
    export PIP_SAI=0x0000000000000000000000000000000000000001

    deploy-ilk-sai
    log "SAI deployed"

    # shellcheck source=/dev/null
    . "load-ilk-sai-$(seth chain)"
    rm "load-ilk-sai-$(seth chain)"

    # Deploy ScdMcdMigration (no solc optimization)
    dappBuild scd-mcd-migration
    MIGRATION=$(dappCreate scd-mcd-migration ScdMcdMigration "$SAI_TUB" "$CDP_MANAGER" "$MCD_JOIN_SAI" "$ethAdapterAddr" "$MCD_JOIN_DAI")

    # Rely Migration contract to access the SAI Adapter
    seth send "$MCD_JOIN_SAI" "rely(address)" "$MIGRATION"
    # Deny deployer to access the SAI Adapter
    seth send "$MCD_JOIN_SAI" "deny(address)" "$ETH_FROM"

    seth send "$MCD_DEPLOY" 'releaseAuthFlip(bytes32)' "$(seth --to-bytes32 "$(seth --from-ascii "SAI")")"
    log "auth removed for SAI"

    # Deploy MigrationProxyActions to use migrate function through DSProxy (no solc optimization)
    MIGRATION_PROXY_ACTIONS=$(dappCreate scd-mcd-migration MigrationProxyActions)
fi

# As all initial collaterals were deployed, we can remove authority of the deployment contract from the core contracts
seth send "$MCD_DEPLOY" 'releaseAuth()'
log "general auth removed"
for token in $tokens; do
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
        seth send "$MCD_DEPLOY" 'releaseAuthFlip(bytes32)' "$(seth --to-bytes32 "$(seth --from-ascii "${token}-${ilk}")")"
    done

    log "auth removed for ${token}-${ilk}"
done

# Deploy Pause Plan - Library functions for the Pause (no solc optimization)
MCD_GOV_ACTIONS=$(dappCreate dss-deploy GovActions)
log "gov actions deployed"

unset SKIP_BUILD

# Deploy Pause Proxy Actions (support contract for executing initial set up of the dss system)
dappBuild dss-deploy-pause-proxy-actions
PROXY_PAUSE_ACTIONS=$(dappCreate dss-deploy-pause-proxy-actions DssDeployPauseProxyActions)
log "pause actions deployed"

# Get a proxy for the deployer address (create if didn't previously exist)
PROXY_DEPLOYER=0x$(seth call "$PROXY_REGISTRY" 'proxies(address)(address)' "$ETH_FROM")
if [[ "$PROXY_DEPLOYER" == "0x0000000000000000000000000000000000000000" ]]; then
    seth send "$PROXY_REGISTRY" 'build()'
    log "proxy deployer deployed"
    PROXY_DEPLOYER=0x"$(seth call "$PROXY_REGISTRY" 'proxies(address)(address)' "$ETH_FROM")"
fi

# Set the proxy address as root of the roles (in order to be able to do all the variables set up)
seth send "$MCD_ADM" 'setRootUser(address,bool)' "$PROXY_DEPLOYER" true

# Deploy chief as new $MCD_ADM if there isn't an authority in the config file (no solc optimization)
dappBuild vote-proxy
MCD_ADM=$(jq -r ".authority | values" "$CONFIG_FILE")
if [[ -z "$MCD_ADM" ]]; then
    MCD_IOU=$(dappCreate vote-proxy DSToken "$(seth --to-bytes32 "$(seth --from-ascii "IOU")")")
    seth send "$MCD_IOU" 'setAuthority(address)' "0x0000000000000000000000000000000000000000"
    log "IOU token deployed"

    MCD_ADM=$(dappCreate vote-proxy DSChief "$MCD_GOV" "$MCD_IOU" 5)
    seth send "$MCD_IOU" 'setOwner(address)' "${MCD_ADM}"
    log "chief deployed"

    # Deploy Vote Proxy Factory (no solc optimization)
    VOTE_PROXY_FACTORY=$(dappCreate vote-proxy VoteProxyFactory "$MCD_ADM")
    log "vote proxy factory deployed"
else
    copyAbis vote-proxy
fi

if [[ -n "$GOV_GUARD" ]]; then
  seth send "$GOV_GUARD" 'setRoot(address)' "$MCD_PAUSE_PROXY"
fi


# Copy dss-deploy abi files
copyAbis dss-deploy

for token in $tokens; do
    ILKS_VARS+=",
    \"${token}\": \"$(eval echo "\$${token}")\""
    if [[ "$(eval echo "\$VAL_${token}")" != "" ]]; then
    ILKS_VARS+=",
    \"VAL_${token}\": \"$(eval echo "\$VAL_${token}")\""
    fi
    ILKS_VARS+=",
    \"PIP_${token}\": \"$(eval echo "\$PIP_${token}")\""
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
    ILKS_VARS+=",
    \"MCD_JOIN_${token}_${ilk}\": \"$(eval echo "\$MCD_JOIN_${token}_${ilk}")\""
    ILKS_VARS+=",
    \"MCD_FLIP_${token}_${ilk}\": \"$(eval echo "\$MCD_FLIP_${token}_${ilk}")\""
    done
done

if [[ -n "$MIGRATION" ]]; then
    ILKS_VARS+=",
    \"SAI\": \"$SAI\""
    ILKS_VARS+=",
    \"PIP_SAI\": \"$PIP_SAI\""
    ILKS_VARS+=",
    \"MCD_JOIN_SAI\": \"$MCD_JOIN_SAI\""
    ILKS_VARS+=",
    \"MCD_FLIP_SAI\": \"$MCD_FLIP_SAI\""

    MIGRATION_VARS=",
    \"SAI_TUB\": \"$SAI_TUB\""
    MIGRATION_VARS+=",
    \"MIGRATION\": \"$MIGRATION\""
    MIGRATION_VARS+=",
    \"MIGRATION_PROXY_ACTIONS\": \"$MIGRATION_PROXY_ACTIONS\""
fi

# Generate addresses.json file
cat > "$OUT_DIR"/addresses.json <<EOF
{
    "DEPLOYER": "$ETH_FROM",
    "MULTICALL": "$MULTICALL",
    "FAUCET": "$FAUCET",
    "MCD_DEPLOY": "$MCD_DEPLOY",
    "MCD_GOV": "$MCD_GOV",
    "GOV_GUARD": "$GOV_GUARD",
    "MCD_ADM": "$MCD_ADM",
    "MCD_IOU": "$MCD_IOU",
    "VOTE_PROXY_FACTORY": "$VOTE_PROXY_FACTORY",
    "MCD_VAT": "$MCD_VAT",
    "MCD_JUG": "$MCD_JUG",
    "MCD_CAT": "$MCD_CAT",
    "MCD_VOW": "$MCD_VOW",
    "MCD_JOIN_DAI": "$MCD_JOIN_DAI",
    "MCD_FLAP": "$MCD_FLAP",
    "MCD_FLOP": "$MCD_FLOP",
    "MCD_PAUSE": "$MCD_PAUSE",
    "MCD_PAUSE_PROXY": "$MCD_PAUSE_PROXY",
    "MCD_GOV_ACTIONS": "$MCD_GOV_ACTIONS",
    "MCD_DAI": "$MCD_DAI",
    "MCD_SPOT": "$MCD_SPOT",
    "MCD_POT": "$MCD_POT",
    "MCD_END": "$MCD_END",
    "MCD_ESM": "$MCD_ESM",
    "PROXY_ACTIONS": "$PROXY_ACTIONS",
    "CDP_MANAGER": "$CDP_MANAGER",
    "GET_CDPS": "$GET_CDPS",
    "PROXY_FACTORY": "$PROXY_FACTORY",
    "PROXY_REGISTRY": "$PROXY_REGISTRY"$ILKS_VARS,
    "PROXY_PAUSE_ACTIONS": "$PROXY_PAUSE_ACTIONS",
    "PROXY_DEPLOYER": "$PROXY_DEPLOYER"$MIGRATION_VARS
}
EOF

"$LIBEXEC_DIR"/set-vat-line

"$LIBEXEC_DIR"/set-vow-wait

"$LIBEXEC_DIR"/set-vow-bump

"$LIBEXEC_DIR"/set-vow-dump

"$LIBEXEC_DIR"/set-vow-sump

"$LIBEXEC_DIR"/set-vow-hump

"$LIBEXEC_DIR"/set-jug-base

"$LIBEXEC_DIR"/set-pot-dsr

"$LIBEXEC_DIR"/set-end-wait

"$LIBEXEC_DIR"/set-beg "flap"

"$LIBEXEC_DIR"/set-ttl "flap"

"$LIBEXEC_DIR"/set-tau "flap"

"$LIBEXEC_DIR"/set-beg "flop"

"$LIBEXEC_DIR"/set-flop-pad

"$LIBEXEC_DIR"/set-ttl "flop"

"$LIBEXEC_DIR"/set-tau "flop"

"$LIBEXEC_DIR"/poll-deploy

"$LIBEXEC_DIR"/set-ilks-price

"$LIBEXEC_DIR"/set-ilks-pip-whitelist

"$LIBEXEC_DIR"/set-ilks-mat

setLinesMode=$(jq -r ".setLinesMode" "$CONFIG_FILE")
if [[ $setLinesMode = "direct" ]]; then
    "$LIBEXEC_DIR"/set-ilks-line
elif [[ $setLinesMode = "vote" ]]; then
    "$LIBEXEC_DIR"/set-ilks-spell-line
fi

"$LIBEXEC_DIR"/set-ilks-dust

"$LIBEXEC_DIR"/set-ilks-duty

"$LIBEXEC_DIR"/set-ilks-spotter-poke

if [[ -n "$MIGRATION" ]]; then
    spot=$(seth --to-uint256 "1000000000000000000000000000000000000000000000")
    calldata="$(seth calldata 'file(address,address,address,bytes32,bytes32,uint256)' "$MCD_PAUSE" "$MCD_GOV_ACTIONS" "$MCD_VAT" "$(seth --to-bytes32 "$(seth --from-ascii "SAI")")" "$(seth --to-bytes32 "$(seth --from-ascii "spot")")" "$spot")"
    seth send "$PROXY_DEPLOYER" 'execute(address,bytes memory)' "$PROXY_PAUSE_ACTIONS" "$calldata"
fi

"$LIBEXEC_DIR"/set-ilks-chop

"$LIBEXEC_DIR"/set-ilks-lump

"$LIBEXEC_DIR"/set-ilks-beg

"$LIBEXEC_DIR"/set-ilks-ttl

"$LIBEXEC_DIR"/set-ilks-tau

if [[ -f "$CASE" ]]; then
    "$CASE"
fi

"$LIBEXEC_DIR"/set-ilks-osm

"$LIBEXEC_DIR"/set-pause-auth-delay
